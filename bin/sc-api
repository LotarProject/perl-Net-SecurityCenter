#!/usr/bin/perl

use strict;
use warnings;

use Net::SecurityCenter;

use Getopt::Long qw( :config gnu_compat );
use Pod::Usage;
use Cwd;
use Term::ReadKey;
use JSON;

use Data::Dumper;

our $VERSION = '0.100_10';

sub error {
    my ($error) = @_;
    $error =~ s/ at .* line \d+.*//;
    print "ERROR: $error\n";
    exit(255);
}

# Try & Catch

sub try(&;$) {

    my ( $try, $catch ) = @_;

    eval {&$try};

    if ($@) {
        &$catch($@);
    }

}

sub catch(&) {
    shift;
}

my @options = (

    'help|h',
    'man',
    'version',

    'hostname=s',
    'username=s',
    'password=s',

    'format|f=s',
    'dumper',
    'json'

);

my $options = {};
my $params  = {};
my $results = {};
my $sc;

GetOptions( $options, @options ) or pod2usage( -verbose => 0 );

my $api    = $ARGV[0] || undef;
my $method = $ARGV[1] || undef;

pod2usage(1) if ( $options->{'help'} );

pod2usage( -exitstatus => 0, -verbose => 2 ) if ( $options->{'man'} );
pod2usage( -exitstatus => 0, -verbose => 0 ) if ( !$options->{'hostname'} || !$options->{'username'} );

if ( $options->{'dumper'} ) {
    $options->{'format'} = 'dumper';
}

if ( $options->{'json'} ) {
    $options->{'format'} = 'json';
}

$options->{'format'} ||= 'json';

pod2usage( -verbose => 0 ) if ( !$api || !$method );

foreach my $arg (@ARGV) {

    if ( $arg =~ m{^([^:]+):(.*)$} ) {

        my ( $key, $value ) = ( $1, $2 );
        $key =~ s{-}{_}g;
        $params->{$key} = $value;

    }

}

if ( !$options->{'password'} ) {

    print "Enter $options->{username} password: ";
    ReadMode 'noecho';

    $options->{'password'} = ReadLine 0;
    chomp $options->{'password'};

    ReadMode 'normal';
    print "\n";

}

my $dispatch_table = {
    'request' => sub {
        $options->{'params'} ||= '{}';
        $sc->rest->request( $options->{'method'}, $options->{'path'}, decode_json( $options->{'params'} ) );
    },
};

try {
    $sc = Net::SecurityCenter->new( $options->{'hostname'} );
} catch {
    error(@_);
};

if ( !$sc->can($api) || !$sc->$api->can($method) ) {
    error("Unkown $api $method command");
}

try {
    $sc->login( $options->{'username'}, $options->{'password'} );
} catch {
    error(@_);
};

try {
    $results = $sc->$api->$method( %{$params} );
} catch {
    error(@_);
};

if ( ref $results eq 'ARRAY' || ref $results eq 'HASH' ) {

    if ( $options->{'format'} eq 'json' ) {

        # Convert bessed Time::Piece and Time::Seconds object for JSON encoding
        require Time::Piece;

        sub Time::Piece::TO_JSON {
            my ($time) = @_;
            return $time->datetime;    # convert all date to ISO 8601 format
        }

        sub Time::Seconds::TO_JSON {
            my ($time) = @_;
            return $time->seconds;
        }

        print JSON->new->pretty(1)->convert_blessed(1)->encode($results);
        exit(0);

    }

    if ( $options->{'format'} eq 'dumper' ) {
        print Dumper($results);
        exit(0);
    }

}

print "$results\n";
exit(0);

__END__
=encoding utf-8

=head1 NAME

sc-api - Tenable.sc (SecurityCenter) API command line interface

=head1 SYNOPSIS

    sc-api [COMMAND] [OPTIONS]

    Commands:
        request             Execute RAW REST request

    Options:
        --help              Brief help message
        --man               Full documentation
        --verbose           Print more info during run

        --hostname          Tenable.sc (SecurityCenter) host/IP address
        --username          Username
        --password          Password

        --format            Output format (default: json)
        --json              JSON output format
        --dumper            Data::Dumper output format

=head1 DESCRIPTION

C<sc-api> Tenable.sc (SecurityCenter) API command line interface.

=head1 COMMANDS

=head2 request

Execute RAW REST request to Tenable.sc (SecurityCenter).

For more information about the Tenable.sc (SecurityCenter) REST API follow the online documentation:

=over 4

=item * L<https://docs.tenable.com/sccv/api/index.html>

=back

=head3 Options

    --method    HTTP Request method (GET, POST, HEAD, DELETE, PUT, PATCH)
    --path      REST API path (eg. /scan, /policy/1)
    --params    Params in JSON format (eg. {"fields":"id,name,description"})

=head3 Example

    sc-api request --method GET --path /scan --params '{ "fields":"id,name" }' \
            --hostname sc.example.org --username secman --password password

=head1 OPTIONS

=head1 AUTHOR

L<Giuseppe Di Terlizzi|https://metacpan.org/author/gdt>

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2018-2019 L<Giuseppe Di Terlizzi|https://metacpan.org/author/gdt>

You may use and distribute this module according to the same terms
that Perl is distributed under.
