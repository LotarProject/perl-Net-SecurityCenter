#!/usr/bin/perl

use strict;
use warnings;

use Net::SecurityCenter;

use Getopt::Long qw( :config gnu_compat );
use Pod::Usage;
use Cwd;
use Term::ReadKey;
use JSON;

use Data::Dumper;

our $VERSION = '0.100_20';

sub error {
    my ($error) = @_;
    $error =~ s/ at .* line \d+.*//;
    print "ERROR: $error\n";
    exit(255);
}

my @options = (

    'help|h',
    'man',
    'version',
    'verbose',

    'hostname=s',
    'username=s',
    'password=s',

    'format|f=s',
    'dumper',
    'json'

);

my $options = {};
my $params  = {};
my $results = {};

GetOptions( $options, @options ) or pod2usage( -verbose => 0 );

my $api    = $ARGV[0] || undef;
my $method = $ARGV[1] || undef;

$api    =~ s/-/_/g if ($api);
$method =~ s/-/_/g if ($method);

pod2usage(1) if ( $options->{'help'} );

pod2usage( -exitstatus => 0, -verbose => 2 ) if ( $options->{'man'} );
pod2usage( -exitstatus => 0, -verbose => 0 ) if ( !$options->{'hostname'} || !$options->{'username'} );

if ( $options->{'dumper'} ) {
    $options->{'format'} = 'dumper';
}

if ( $options->{'json'} ) {
    $options->{'format'} = 'json';
}

$options->{'format'} ||= 'json';

pod2usage( -verbose => 0 ) if ( !$api || !$method );

foreach my $arg (@ARGV) {

    if ( $arg =~ m{^([^:]+):(.*)$} ) {

        my ( $key, $value ) = ( $1, $2 );
        $key =~ s{-}{_}g;
        $params->{$key} = $value;

    }

}

if ( !$options->{'password'} ) {

    print "Enter $options->{username} password: ";
    ReadMode 'noecho';

    $options->{'password'} = ReadLine 0;
    chomp $options->{'password'};

    ReadMode 'normal';
    print "\n";

}

my $sc_options = {};

if ( $options->{'verbose'} ) {
    $sc_options->{'logger'} = Net::SecurityCenter::LoggerSimple->new;
}

my $sc = Net::SecurityCenter->new( $options->{'hostname'}, $sc_options ) or error($@);

if ( !$sc->can($api) || !$sc->$api->can($method) ) {
    error("Unknown $api $method command");
}

$sc->login( $options->{'username'}, $options->{'password'} ) or error( $sc->error );

$results = $sc->$api->$method( %{$params} ) or error( $sc->error );

if ( ref $results eq 'ARRAY' || ref $results eq 'HASH' ) {

    if ( $options->{'format'} eq 'json' ) {

        # Convert bessed Time::Piece and Time::Seconds object for JSON encoding
        require Time::Piece;

        sub Time::Piece::TO_JSON {
            my ($time) = @_;
            return $time->datetime;    # convert all date to ISO 8601 format
        }

        sub Time::Seconds::TO_JSON {
            my ($time) = @_;
            return $time->seconds;
        }

        print JSON->new->pretty(1)->convert_blessed(1)->encode($results);
        exit(0);

    }

    if ( $options->{'format'} eq 'dumper' ) {
        print Dumper($results);
        exit(0);
    }

}

print "$results\n";
exit(0);

package Net::SecurityCenter::LoggerSimple;

use Test::More;

sub new {
    my $class = shift;
    return bless {}, $class;
}

sub info {
    my ( $self, $message ) = @_;
    print STDERR "INFO - $message\n";
    return;
}

sub debug {
    my ( $self, $message ) = @_;
    print STDERR "DEBUG - $message\n";
    return;
}

sub warning {
    my ( $self, $message ) = @_;
    print STDERR "WARNING - $message\n";
    return;
}

sub error {
    my ( $self, $message ) = @_;
    print STDERR "ERROR - $message\n";
    return;
}

__END__
=encoding utf-8

=head1 NAME

sc-api - Tenable.sc (SecurityCenter) API command line interface

=head1 SYNOPSIS

    sc-api [COMMAND] [OPTIONS]

    Commands:

        analysis
        credential
        feed
        file
        plugin
        plugin-family
        policy
        report
        repository
        scan
        scan-result
        scanner
        system
        user
        zone

    Options:
        --help              Brief help message
        --man               Full documentation
        --verbose           Print more info during run

        --hostname          Tenable.sc (SecurityCenter) host/IP address
        --username          Username
        --password          Password

        --format            Output format (default: json)
        --json              JSON output format
        --dumper            Data::Dumper output format

=head1 DESCRIPTION

C<sc-api> Tenable.sc (SecurityCenter) API command line interface.

=head1 COMMANDS

=head2 analysis

See L<Net::SecurityCenter::Analysis> class.

=head2 credential

See L<Net::SecurityCenter::Analysis> class.

=head2 feed

See L<Net::SecurityCenter::Feed> class.

=head2 file

See L<Net::SecurityCenter::File> class.

=head2 plugin

See L<Net::SecurityCenter::Plugin> class.

=head2 plugin-family

See L<Net::SecurityCenter::PluginFamily> class.

=head2 policy

See L<Net::SecurityCenter::Policy> class.

=head2 report

See L<Net::SecurityCenter::Report> class.

=head2 repository

See L<Net::SecurityCenter::Repository> class.

=head2 scan

See L<Net::SecurityCenter::Scan> class.

=head2 scan-result

See L<Net::SecurityCenter::ScanResult> class.

=head2 scanner

See L<Net::SecurityCenter::Scanner> class.

=head2 system

See L<Net::SecurityCenter::System> class.

=head2 user

See L<Net::SecurityCenter::User> class.

=head2 zone

See L<Net::SecurityCenter::Zone> class.


=head1 OPTIONS

=head1 AUTHOR

L<Giuseppe Di Terlizzi|https://metacpan.org/author/gdt>

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2018-2019 L<Giuseppe Di Terlizzi|https://metacpan.org/author/gdt>

You may use and distribute this module according to the same terms
that Perl is distributed under.
